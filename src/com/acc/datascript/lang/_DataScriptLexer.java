/* The following code was generated by JFlex 1.4.3 on 05.01.2016 07:37 */

package com.acc.datascript.lang;
import com.intellij.lexer.*;
import com.intellij.psi.tree.IElementType;
import static com.acc.datascript.lang.psi.DataScriptTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05.01.2016 07:37 from the specification file
 * <tt>C:/Users/demius/Desktop/Java projects/IntelliJ/DataScriptNative/src/com/acc/datascript/lang/_DataScriptLexer.flex</tt>
 */
public class _DataScriptLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\2\1\0\1\1\1\1\22\0\1\52\1\0\1\14"+
    "\4\0\1\12\1\21\1\22\1\61\1\60\1\23\1\57\1\6\1\4"+
    "\12\5\1\56\1\55\1\64\1\63\1\65\1\54\1\0\32\11\1\17"+
    "\1\13\1\20\1\0\1\10\1\0\1\31\1\36\1\25\1\3\1\27"+
    "\1\46\1\45\1\26\1\41\1\11\1\44\1\37\1\30\1\32\1\51"+
    "\1\33\1\43\1\50\1\24\1\35\1\34\1\40\1\42\1\53\1\47"+
    "\1\11\1\15\1\62\1\16\54\0\1\7\12\0\1\7\4\0\1\7"+
    "\5\0\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7"+
    "\7\0\1\7\1\0\1\7\201\0\5\7\1\0\2\7\2\0\4\7"+
    "\10\0\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7"+
    "\1\0\213\7\10\0\236\7\11\0\46\7\2\0\1\7\7\0\47\7"+
    "\110\0\33\7\5\0\3\7\55\0\53\7\43\0\2\7\1\0\143\7"+
    "\1\0\1\7\17\0\2\7\7\0\2\7\12\0\3\7\2\0\1\7"+
    "\20\0\1\7\1\0\36\7\35\0\131\7\13\0\1\7\30\0\41\7"+
    "\11\0\2\7\4\0\1\7\5\0\26\7\4\0\1\7\11\0\1\7"+
    "\3\0\1\7\27\0\31\7\107\0\1\7\1\0\13\7\127\0\66\7"+
    "\3\0\1\7\22\0\1\7\7\0\12\7\17\0\7\7\1\0\7\7"+
    "\5\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\1\7"+
    "\3\0\4\7\3\0\1\7\20\0\1\7\15\0\2\7\1\0\3\7"+
    "\16\0\2\7\23\0\6\7\4\0\2\7\2\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\2\7\1\0\2\7\37\0\4\7\1\0\1\7"+
    "\23\0\3\7\20\0\11\7\1\0\3\7\1\0\26\7\1\0\7\7"+
    "\1\0\2\7\1\0\5\7\3\0\1\7\22\0\1\7\17\0\2\7"+
    "\43\0\10\7\2\0\2\7\2\0\26\7\1\0\7\7\1\0\2\7"+
    "\1\0\5\7\3\0\1\7\36\0\2\7\1\0\3\7\17\0\1\7"+
    "\21\0\1\7\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7"+
    "\1\0\1\7\1\0\2\7\3\0\2\7\3\0\3\7\3\0\14\7"+
    "\26\0\1\7\64\0\10\7\1\0\3\7\1\0\27\7\1\0\12\7"+
    "\1\0\5\7\3\0\1\7\32\0\2\7\6\0\2\7\43\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0\1\7"+
    "\40\0\1\7\1\0\2\7\17\0\2\7\22\0\10\7\1\0\3\7"+
    "\1\0\51\7\2\0\1\7\20\0\1\7\21\0\2\7\30\0\6\7"+
    "\5\0\22\7\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7"+
    "\72\0\60\7\1\0\2\7\14\0\7\7\72\0\2\7\1\0\1\7"+
    "\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7\1\0\7\7"+
    "\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7\1\0\4\7"+
    "\1\0\2\7\11\0\1\7\2\0\5\7\1\0\1\7\25\0\4\7"+
    "\40\0\1\7\77\0\10\7\1\0\44\7\33\0\5\7\163\0\53\7"+
    "\24\0\1\7\20\0\6\7\4\0\4\7\3\0\1\7\3\0\2\7"+
    "\7\0\3\7\4\0\15\7\14\0\1\7\21\0\46\7\1\0\1\7"+
    "\5\0\1\7\2\0\53\7\1\0\u014d\7\1\0\4\7\2\0\7\7"+
    "\1\0\1\7\1\0\4\7\2\0\51\7\1\0\4\7\2\0\41\7"+
    "\1\0\4\7\2\0\7\7\1\0\1\7\1\0\4\7\2\0\17\7"+
    "\1\0\71\7\1\0\4\7\2\0\103\7\45\0\20\7\20\0\125\7"+
    "\14\0\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\25\0\15\7"+
    "\1\0\4\7\16\0\22\7\16\0\22\7\16\0\15\7\1\0\3\7"+
    "\17\0\64\7\43\0\1\7\4\0\1\7\103\0\130\7\10\0\51\7"+
    "\1\0\1\7\5\0\106\7\12\0\35\7\63\0\36\7\2\0\5\7"+
    "\13\0\54\7\25\0\7\7\70\0\27\7\11\0\65\7\122\0\1\7"+
    "\135\0\57\7\21\0\7\7\67\0\36\7\15\0\2\7\12\0\54\7"+
    "\32\0\44\7\51\0\3\7\12\0\44\7\153\0\4\7\1\0\4\7"+
    "\3\0\2\7\11\0\300\7\100\0\u0116\7\2\0\6\7\2\0\46\7"+
    "\2\0\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7"+
    "\1\0\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7"+
    "\1\0\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7"+
    "\1\0\7\7\164\0\1\7\15\0\1\7\20\0\15\7\145\0\1\7"+
    "\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7"+
    "\5\0\5\7\4\0\1\7\64\0\2\7\u0a7b\0\57\7\1\0\57\7"+
    "\1\0\205\7\6\0\4\7\3\0\2\7\14\0\46\7\1\0\1\7"+
    "\5\0\1\7\2\0\70\7\7\0\1\7\20\0\27\7\11\0\7\7"+
    "\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7"+
    "\1\0\7\7\1\0\7\7\120\0\1\7\u01d5\0\2\7\52\0\5\7"+
    "\5\0\2\7\4\0\126\7\6\0\3\7\1\0\132\7\1\0\4\7"+
    "\5\0\51\7\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7"+
    "\112\0\u51cd\7\63\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\20\7"+
    "\12\0\2\7\24\0\57\7\20\0\31\7\10\0\106\7\61\0\11\7"+
    "\2\0\147\7\2\0\4\7\1\0\4\7\14\0\13\7\115\0\12\7"+
    "\1\0\3\7\1\0\4\7\1\0\27\7\35\0\64\7\16\0\62\7"+
    "\76\0\6\7\3\0\1\7\16\0\34\7\12\0\27\7\31\0\35\7"+
    "\7\0\57\7\34\0\1\7\60\0\51\7\27\0\3\7\1\0\10\7"+
    "\24\0\27\7\3\0\1\7\5\0\60\7\1\0\1\7\3\0\2\7"+
    "\2\0\5\7\2\0\1\7\1\0\1\7\30\0\3\7\2\0\13\7"+
    "\7\0\3\7\14\0\6\7\2\0\6\7\2\0\6\7\11\0\7\7"+
    "\1\0\7\7\221\0\43\7\35\0\u2ba4\7\14\0\27\7\4\0\61\7"+
    "\u2104\0\u016e\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\1\7"+
    "\1\0\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0\2\7"+
    "\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7"+
    "\50\0\14\7\164\0\5\7\1\0\207\7\44\0\32\7\6\0\32\7"+
    "\13\0\131\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7"+
    "\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\3"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\23\3\1\16\1\17\1\20\1\21\1\22\1\1\1\23"+
    "\1\24\1\25\1\0\4\3\1\26\1\27\1\0\1\30"+
    "\3\0\11\3\1\31\17\3\1\32\5\3\1\33\1\34"+
    "\14\3\1\35\1\36\1\37\1\40\1\41\1\0\24\3"+
    "\1\42\1\43\1\44\4\3\1\45\4\3\1\46\7\3"+
    "\1\47\6\3\1\50\11\3\1\51\1\3\1\52\1\53"+
    "\1\3\1\54\1\55\3\3\1\56\11\3\1\57\4\3"+
    "\1\60\1\3\1\61\1\3\1\62\16\3\1\63\1\64"+
    "\1\65\1\66\2\3\1\67\1\3\1\70\4\3\1\71"+
    "\1\72\1\3\1\73\11\3\1\74\3\3\1\75\1\3"+
    "\1\76\10\3\1\77\2\3\1\100\1\3\1\101\1\3"+
    "\1\102\1\3\1\103\1\104\1\3\1\105\1\106\1\107"+
    "\1\110\2\3\1\111\1\3\1\112\2\3\1\113\1\114"+
    "\1\115\1\3\1\116\1\117\2\3\1\120\1\121\7\3"+
    "\1\122\3\3\1\123\1\3\1\124\1\125\1\126\2\3"+
    "\1\127\1\130\1\3\1\131\1\132\5\3\1\133\1\134"+
    "\1\3\1\135\1\136\1\3\1\137\1\140\1\0\2\3"+
    "\1\141\1\142\1\0\1\143\1\144\1\0\1\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\66\0\u0144"+
    "\0\u017a\0\u01b0\0\66\0\66\0\66\0\66\0\66\0\66"+
    "\0\66\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\66\0\66\0\66\0\66"+
    "\0\66\0\u05e8\0\66\0\u061e\0\u0654\0\u068a\0\u06c0\0\u06f6"+
    "\0\u072c\0\u0762\0\u0798\0\u07ce\0\u017a\0\66\0\u0804\0\u01b0"+
    "\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4"+
    "\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64"+
    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14"+
    "\0\u0d4a\0\u0d80\0\u0144\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0144\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008"+
    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\66"+
    "\0\66\0\66\0\66\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440"+
    "\0\u1476\0\u14ac\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0"+
    "\0\u0144\0\u0144\0\u0144\0\u1626\0\u165c\0\u1692\0\u16c8\0\u0144"+
    "\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u0144\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u0144\0\u1950\0\u1986\0\u19bc"+
    "\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36\0\u1b6c"+
    "\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u0144\0\u1cb0\0\u0144"+
    "\0\u0144\0\u1ce6\0\66\0\u0144\0\u1d1c\0\u1d52\0\u1d88\0\u0144"+
    "\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38"+
    "\0\u1f6e\0\u0144\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u0144\0\u207c"+
    "\0\u0144\0\u20b2\0\u0144\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0"+
    "\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370"+
    "\0\u23a6\0\u0144\0\u0144\0\u23dc\0\u0144\0\u2412\0\u2448\0\66"+
    "\0\u247e\0\u0144\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u0144\0\u0144"+
    "\0\u258c\0\u0144\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a\0\u26d0"+
    "\0\u2706\0\u273c\0\u2772\0\u0144\0\u27a8\0\u27de\0\u2814\0\u0144"+
    "\0\u284a\0\u0144\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e"+
    "\0\u29c4\0\u29fa\0\u0144\0\u2a30\0\u2a66\0\u0144\0\u2a9c\0\u0144"+
    "\0\u2ad2\0\u0144\0\u2b08\0\66\0\u0144\0\u2b3e\0\u0144\0\u0144"+
    "\0\u0144\0\u0144\0\u2b74\0\u2baa\0\u0144\0\u2be0\0\u0144\0\u2c16"+
    "\0\u2c4c\0\u0144\0\u0144\0\u0144\0\u2c82\0\u0144\0\u0144\0\u2cb8"+
    "\0\u2cee\0\u0144\0\u0144\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc"+
    "\0\u2e32\0\u2e68\0\u0144\0\u2e9e\0\u2ed4\0\u2f0a\0\u0144\0\u2f40"+
    "\0\u0144\0\u0144\0\u0144\0\u2f76\0\u2fac\0\u0144\0\u0144\0\u2fe2"+
    "\0\u0144\0\u0144\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u0144"+
    "\0\u0144\0\u3126\0\u0144\0\u0144\0\u315c\0\u0144\0\u0144\0\u3192"+
    "\0\u31c8\0\u31fe\0\u0144\0\u0144\0\u3234\0\u0144\0\u0144\0\u326a"+
    "\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\2"+
    "\1\10\1\11\1\2\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\10"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\10\1\41\1\42\1\10\1\43"+
    "\1\44\1\3\1\10\1\2\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\67\0\2\3\47\0"+
    "\1\3\16\0\1\10\1\56\1\10\2\0\2\10\12\0"+
    "\3\10\1\57\1\10\1\60\7\10\1\61\7\10\1\62"+
    "\1\0\1\10\16\0\1\63\66\0\1\6\1\64\62\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\26\10\1\0"+
    "\1\10\12\0\12\65\1\66\1\67\52\65\13\70\1\71"+
    "\1\66\51\70\3\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\10\1\72\1\10\1\73\5\10\1\74\11\10"+
    "\1\75\2\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\5\10\1\76\5\10\1\77\11\10"+
    "\1\100\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\5\10\1\101\20\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\6\10\1\102"+
    "\17\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\1\103\5\10\1\104\4\10\1\105\12\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\3\10\1\106\1\10\1\107\2\10\1\110\14\10"+
    "\1\111\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\5\10\1\112\16\10\1\113\1\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\1\114\6\10\1\115\16\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\5\10\1\116\7\10"+
    "\1\117\6\10\1\120\1\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\3\10\1\121\1\10"+
    "\1\122\15\10\1\123\1\10\1\124\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\5\10\1\125"+
    "\7\10\1\126\7\10\1\127\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\15\10\1\130\10\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\131\5\10\1\132\17\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\2\10\1\133"+
    "\12\10\1\134\10\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\10\10\1\135\15\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\24\10\1\136\1\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\137\4\10\1\140"+
    "\4\10\1\141\6\10\1\142\1\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\143"+
    "\21\10\1\144\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\6\10\1\145\1\10\1\146\13\10"+
    "\1\147\1\10\1\0\1\10\74\0\1\150\66\0\1\151"+
    "\1\0\1\152\63\0\1\153\7\0\1\154\63\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\1\155\1\156\11\10"+
    "\1\157\6\10\1\160\3\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\11\10\1\161\14\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\162\25\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\10\10\1\163\15\10\1\0"+
    "\1\10\12\0\2\63\1\0\63\63\5\0\1\64\60\0"+
    "\2\65\1\0\63\65\2\70\1\0\63\70\3\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\2\10\1\164\23\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\13\10\1\165\3\10\1\166\6\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\5\10"+
    "\1\167\16\10\1\170\1\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\1\171\25\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\13\10\1\172\12\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\5\10\1\173\20\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\6\10\1\174\1\10\1\175\15\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\14\10\1\176"+
    "\11\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\10\10\1\177\1\200\14\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\1\10"+
    "\1\201\24\10\1\0\1\10\15\0\1\202\1\0\1\10"+
    "\2\0\2\10\12\0\26\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\13\10\1\203\12\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\26\10\1\0\1\204\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\4\10\1\205\21\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\13\10"+
    "\1\206\12\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\1\10\1\207\7\10\1\210\14\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\10\1\211\24\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\3\10\1\212\11\10"+
    "\1\213\7\10\1\214\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\215\22\10\1\0"+
    "\1\10\15\0\1\216\1\0\1\10\2\0\2\10\12\0"+
    "\26\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\12\10\1\217\13\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\4\10\1\220"+
    "\21\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\5\10\1\221\20\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\11\10\1\222"+
    "\14\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\11\10\1\223\14\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\25\10\1\224"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\11\10\1\225\14\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\1\226\17\10\1\227"+
    "\5\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\6\10\1\230\17\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\231"+
    "\22\10\1\0\1\10\15\0\1\232\1\0\1\10\2\0"+
    "\2\10\12\0\1\233\10\10\1\234\14\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\3\10"+
    "\1\235\22\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\11\10\1\236\14\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\3\10"+
    "\1\237\22\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\25\10\1\240\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\11\10\1\241"+
    "\14\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\6\10\1\242\17\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\6\10\1\243"+
    "\17\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\25\10\1\244\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\11\10\1\245\14\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\4\10\1\246\11\10\1\247\7\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\3\10"+
    "\1\250\22\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\11\10\1\251\14\10\1\0\1\10"+
    "\15\0\1\252\1\0\1\10\2\0\2\10\12\0\26\10"+
    "\1\0\1\10\16\0\1\253\1\154\63\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\1\10\1\254\24\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\15\10\1\255\10\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\256\22\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\5\10\1\257\20\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\260\22\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\11\10\1\261\14\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\12\10\1\262\13\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\3\10\1\263\22\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\264\22\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\10\10\1\265\15\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\24\10\1\266\1\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\3\10\1\267\11\10\1\270\10\10\1\0\1\10\15\0"+
    "\1\271\1\0\1\10\2\0\2\10\12\0\26\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\13\10\1\272\12\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\1\273\25\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\6\10"+
    "\1\274\17\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\6\10\1\275\17\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\15\10"+
    "\1\276\10\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\4\10\1\277\21\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\15\10"+
    "\1\300\10\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\11\10\1\301\14\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\3\10"+
    "\1\302\22\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\13\10\1\303\12\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\23\10"+
    "\1\304\2\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\20\10\1\305\5\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\7\10"+
    "\1\306\12\10\1\307\3\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\4\10\1\310\20\10"+
    "\1\311\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\1\10\1\312\24\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\5\10\1\313"+
    "\20\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\13\10\1\314\12\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\315"+
    "\22\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\6\10\1\316\17\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\16\10\1\317"+
    "\7\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\1\10\1\320\24\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\13\10\1\321"+
    "\12\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\11\10\1\322\14\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\323"+
    "\22\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\21\10\1\324\4\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\16\10\1\325"+
    "\7\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\3\10\1\326\22\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\327"+
    "\22\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\26\10\1\0\1\10\1\330\14\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\24\10\1\331\1\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\2\10\1\332\23\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\24\10\1\333\1\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\10\10\1\334\15\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\1\10\1\335\24\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\10\1\336\24\10\1\0\1\10\15\0\1\337"+
    "\1\0\1\10\2\0\2\10\12\0\26\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\4\10"+
    "\1\340\21\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\10\10\1\341\15\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\1\342"+
    "\25\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\3\10\1\343\22\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\4\10\1\344"+
    "\21\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\11\10\1\345\14\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\10\10\1\346"+
    "\15\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\15\10\1\347\10\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\13\10\1\350"+
    "\12\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\4\10\1\351\21\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\1\10\1\352"+
    "\24\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\3\10\1\353\22\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\11\10\1\354"+
    "\14\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\5\10\1\355\20\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\6\10\1\356"+
    "\17\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\5\10\1\357\20\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\1\360\25\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\3\10\1\361\22\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\11\10\1\362\14\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\6\10\1\363\17\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\11\10\1\364\14\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\365\25\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\1\10\1\366\24\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\5\10\1\367\20\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\5\10\1\370\20\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\3\10\1\371\22\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\5\10\1\372\20\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\24\10\1\373\1\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\374\22\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\11\10\1\375\14\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\376\22\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\1\377\25\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\1\u0100\25\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\u0101"+
    "\22\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\2\10\1\u0102\23\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\u0103"+
    "\22\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\26\10\1\0\1\10\1\u0104\14\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\26\10\1\0\1\u0105"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\24\10"+
    "\1\u0106\1\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\3\10\1\u0107\22\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\23\10"+
    "\1\u0108\2\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\7\10\1\u0109\16\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\2\10"+
    "\1\u010a\23\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\11\10\1\u010b\14\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\24\10"+
    "\1\u010c\1\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\24\10\1\u010d\1\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\5\10"+
    "\1\u010e\20\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\3\10\1\u010f\22\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\13\10"+
    "\1\u0110\12\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\6\10\1\u0111\17\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\3\10"+
    "\1\u0112\22\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\5\10\1\u0113\20\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\11\10"+
    "\1\u0114\14\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\6\10\1\u0115\17\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\4\10"+
    "\1\u0116\21\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\21\10\1\u0117\4\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\11\10"+
    "\1\u0118\14\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\1\10\1\u0119\24\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\21\10"+
    "\1\u011a\4\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\23\10\1\u011b\2\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\7\10"+
    "\1\u011c\16\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\13\10\1\u011d\12\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\21\10"+
    "\1\u011e\4\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\24\10\1\u011f\1\10\1\0\1\10"+
    "\15\0\1\10\1\0\1\10\2\0\2\10\12\0\11\10"+
    "\1\u0120\14\10\1\0\1\10\15\0\1\10\1\0\1\10"+
    "\2\0\2\10\12\0\24\10\1\u0121\1\10\1\0\1\10"+
    "\15\0\1\u0122\1\0\1\10\2\0\2\10\12\0\26\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\3\10\1\u0123\22\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\11\10\1\u0124\14\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\3\10\1\u0125\22\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\5\10\1\u0126\20\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\11\10\1\u0127\14\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\15\10\1\u0128\10\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\6\10\1\u0129\17\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\13\10\1\u012a\12\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\11\10\1\u012b\14\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\1\10\1\u012c\24\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\1\10\1\u012d\24\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\3\10\1\u012e\22\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\11\10\1\u012f\14\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\5\10\1\u0130\20\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\3\10\1\u0131\22\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\3\10\1\u0132\22\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\3\10\1\u0133\22\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\1\10\1\u0134\24\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\23\10\1\u0135\2\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\10\10\1\u0136\15\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\5\10\1\u0137\20\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\6\10\1\u0138\17\10"+
    "\1\0\1\10\15\0\1\10\1\0\1\10\2\0\2\10"+
    "\12\0\6\10\1\u0139\17\10\1\0\1\10\15\0\1\10"+
    "\1\0\1\10\2\0\2\10\12\0\25\10\1\u013a\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\11\10\1\u013b\14\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\3\10\1\u013c\22\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\1\10\1\u013d\24\10\1\0\1\10\15\0\1\u013e\1\0"+
    "\1\10\2\0\2\10\12\0\26\10\1\0\1\10\15\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\2\10\1\u013f"+
    "\23\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\26\10\1\u0140\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\24\10\1\u0141\1\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\4\10\1\u0142\21\10\1\0\1\10\15\0\1\10\1\0"+
    "\1\10\2\0\2\10\12\0\6\10\1\u0143\17\10\1\0"+
    "\1\10\15\0\1\10\1\0\1\10\2\0\2\10\12\0"+
    "\3\10\1\u0144\22\10\1\0\1\10\56\0\1\u0145\24\0"+
    "\1\10\1\0\1\10\2\0\2\10\12\0\3\10\1\u0146"+
    "\22\10\1\0\1\10\15\0\1\10\1\0\1\10\2\0"+
    "\2\10\12\0\7\10\1\u0147\16\10\1\0\1\10\41\0"+
    "\1\u0148\105\0\1\u0149\16\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\3\1\7\11\23\1\5\11"+
    "\1\1\1\11\2\1\1\0\6\1\1\0\1\11\3\0"+
    "\56\1\4\11\1\0\76\1\1\11\54\1\1\11\53\1"+
    "\1\11\73\1\1\0\4\1\1\0\2\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[329];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _DataScriptLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _DataScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1602) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 41: 
          { return ROM;
          }
        case 102: break;
        case 87: 
          { return SYSDATE;
          }
        case 103: break;
        case 11: 
          { return LPAREN;
          }
        case 104: break;
        case 72: 
          { return FETCH;
          }
        case 105: break;
        case 59: 
          { return ROWS;
          }
        case 106: break;
        case 54: 
          { return VIEW;
          }
        case 107: break;
        case 35: 
          { return AND;
          }
        case 108: break;
        case 34: 
          { return ASC;
          }
        case 109: break;
        case 10: 
          { return RBRACKET;
          }
        case 110: break;
        case 83: 
          { return INSERT;
          }
        case 111: break;
        case 23: 
          { return NUMBER;
          }
        case 112: break;
        case 15: 
          { return COLON;
          }
        case 113: break;
        case 70: 
          { return QUERY;
          }
        case 114: break;
        case 33: 
          { return GT_EQ;
          }
        case 115: break;
        case 45: 
          { return DESC;
          }
        case 116: break;
        case 3: 
          { return ID;
          }
        case 117: break;
        case 78: 
          { return STREAM;
          }
        case 118: break;
        case 19: 
          { return EQ;
          }
        case 119: break;
        case 39: 
          { return LAT;
          }
        case 120: break;
        case 65: 
          { return TRANS;
          }
        case 121: break;
        case 66: 
          { return BATCH;
          }
        case 122: break;
        case 75: 
          { return DOUBLE_TYPE;
          }
        case 123: break;
        case 30: 
          { return CONCATENATE;
          }
        case 124: break;
        case 53: 
          { return LONG_TYPE;
          }
        case 125: break;
        case 42: 
          { return ONE;
          }
        case 126: break;
        case 38: 
          { return USE;
          }
        case 127: break;
        case 84: 
          { return RETURN;
          }
        case 128: break;
        case 74: 
          { return DELETE;
          }
        case 129: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 130: break;
        case 98: 
          { return NAMESPACE;
          }
        case 131: break;
        case 67: 
          { return NULLABLE_LONG_TYPE;
          }
        case 132: break;
        case 9: 
          { return LBRACKET;
          }
        case 133: break;
        case 14: 
          { return SEMICOLON;
          }
        case 134: break;
        case 13: 
          { return COMMA;
          }
        case 135: break;
        case 91: 
          { return BETWEEN;
          }
        case 136: break;
        case 49: 
          { return NEXT;
          }
        case 137: break;
        case 60: 
          { return START;
          }
        case 138: break;
        case 101: 
          { return PRIMARY_KEY;
          }
        case 139: break;
        case 4: 
          { return DIV;
          }
        case 140: break;
        case 82: 
          { return UPDATE;
          }
        case 141: break;
        case 95: 
          { return PREPARED;
          }
        case 142: break;
        case 89: 
          { return NOCYCLE;
          }
        case 143: break;
        case 94: 
          { return SEQUENCE;
          }
        case 144: break;
        case 17: 
          { return PLUS;
          }
        case 145: break;
        case 62: 
          { return COUNT;
          }
        case 146: break;
        case 50: 
          { return NULL;
          }
        case 147: break;
        case 20: 
          { return LT;
          }
        case 148: break;
        case 61: 
          { return CLASS;
          }
        case 149: break;
        case 48: 
          { return ENUM;
          }
        case 150: break;
        case 92: 
          { return BOOLEAN_TYPE;
          }
        case 151: break;
        case 6: 
          { return DOT;
          }
        case 152: break;
        case 86: 
          { return DEFAULT;
          }
        case 153: break;
        case 28: 
          { return IN;
          }
        case 154: break;
        case 96: 
          { return PREFETCH;
          }
        case 155: break;
        case 22: 
          { return COMMENT;
          }
        case 156: break;
        case 90: 
          { return PACKAGE;
          }
        case 157: break;
        case 46: 
          { return DATE_TYPE;
          }
        case 158: break;
        case 32: 
          { return NEQ;
          }
        case 159: break;
        case 8: 
          { return RBRACE;
          }
        case 160: break;
        case 58: 
          { return FROM;
          }
        case 161: break;
        case 21: 
          { return GT;
          }
        case 162: break;
        case 55: 
          { return NULLABLE_INT_TYPE;
          }
        case 163: break;
        case 43: 
          { return OUT;
          }
        case 164: break;
        case 93: 
          { return DISTINCT;
          }
        case 165: break;
        case 52: 
          { return LIKE;
          }
        case 166: break;
        case 100: 
          { return TIMESTAMP_TYPE;
          }
        case 167: break;
        case 5: 
          { return INT;
          }
        case 168: break;
        case 29: 
          { return OR;
          }
        case 169: break;
        case 44: 
          { return DATE;
          }
        case 170: break;
        case 27: 
          { return IS;
          }
        case 171: break;
        case 85: 
          { return DECIMAL_TYPE;
          }
        case 172: break;
        case 7: 
          { return LBRACE;
          }
        case 173: break;
        case 77: 
          { return SELECT;
          }
        case 174: break;
        case 64: 
          { return TABLE;
          }
        case 175: break;
        case 68: 
          { return INDEX;
          }
        case 176: break;
        case 99: 
          { return PROCEDURE;
          }
        case 177: break;
        case 71: 
          { return GROUP;
          }
        case 178: break;
        case 97: 
          { return FUNCTION;
          }
        case 179: break;
        case 37: 
          { return NOT;
          }
        case 180: break;
        case 69: 
          { return WHERE;
          }
        case 181: break;
        case 24: 
          { return STRING;
          }
        case 182: break;
        case 56: 
          { return WITH;
          }
        case 183: break;
        case 36: 
          { return ALL;
          }
        case 184: break;
        case 88: 
          { return CONNECT;
          }
        case 185: break;
        case 18: 
          { return MUL;
          }
        case 186: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 187: break;
        case 57: 
          { return FIND;
          }
        case 188: break;
        case 63: 
          { return PRIOR;
          }
        case 189: break;
        case 16: 
          { return MINUS;
          }
        case 190: break;
        case 73: 
          { return ORDER;
          }
        case 191: break;
        case 12: 
          { return RPAREN;
          }
        case 192: break;
        case 81: 
          { return ENTITY;
          }
        case 193: break;
        case 31: 
          { return LT_EQ;
          }
        case 194: break;
        case 76: 
          { return SCHEMA;
          }
        case 195: break;
        case 79: 
          { return STRING_TYPE;
          }
        case 196: break;
        case 26: 
          { return BY;
          }
        case 197: break;
        case 25: 
          { return AS;
          }
        case 198: break;
        case 80: 
          { return HAVING;
          }
        case 199: break;
        case 51: 
          { return LIST;
          }
        case 200: break;
        case 47: 
          { return CALL;
          }
        case 201: break;
        case 40: 
          { return INT_TYPE;
          }
        case 202: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
